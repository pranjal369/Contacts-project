<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="contacts-experience-api-suite.xml" />
	<munit:test name="create-contacts-test" doc:id="62dec819-fe0d-4155-89e9-0592f1753088" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Referring to Create database" doc:id="e0dcf378-8a45-4680-8d49-7b31753b1e74" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="c98986c6-aa02-433c-8786-ff739d0014c1" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://createcontactstest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="localContacts" value="#[output application/json --- readUrl('classpath://createcontactstest\mock_variable_.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="vals" value="#[output application/json --- readUrl('classpath://createcontactstest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="sfContacts" value="#[output application/json --- readUrl('classpath://createcontactstest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="bd9c98c7-1481-4cf4-a9e1-d545257e5c53" >
				<munit:payload value="#[output application/json --- readUrl('classpath://createcontactstest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://createcontactstest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to create-contacts" doc:id="a11648cc-1f45-45b0-94de-2aaec5e99cea" name="create-contacts"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="374f2a6c-4a2a-4a3b-955f-fc0a89f40b73" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import createcontactstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="update-contacts1-test" doc:id="06b32797-3c5b-40b1-b681-eb051eabed64" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="663e5eb3-6853-4229-b774-8a4bc976d7b0" >
				<munit:payload value="#[output application/json --- readUrl('classpath://updatecontacts1test\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://updatecontacts1test\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to update-contacts1" doc:id="a01e992d-baca-419d-8318-458a061aea29" name="update-contacts1"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b3120560-8c55-403f-99e9-9f989fec2364" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import updatecontacts1test::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="delete-contacts-test" doc:id="66ff6781-e5c3-4441-acdc-a1bcdc7fdd37" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="af57128e-6475-46c0-aeb3-403b7302c31e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://deletecontactstest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://deletecontactstest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to delete-contacts" doc:id="fd5fe9cd-297a-46d1-9d0b-2b5d3d512c28" name="delete-contacts"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b3e15d11-5638-4652-8ab7-38dc26659c44" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import deletecontactstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="create-contacts-test1" doc:id="96c2319e-4fb4-4942-92f0-42ec0b3482db" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="6d52eb30-eb10-43dd-9aca-7ae256697d66" >
				<munit:payload value="#[output application/json --- readUrl('classpath://createcontactstest1\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://createcontactstest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to create-contacts" doc:id="78de7646-185d-4388-a231-a8ccf8629af5" name="create-contacts"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d816883a-8b16-47f6-8bfa-60bba9999722" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import createcontactstest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
